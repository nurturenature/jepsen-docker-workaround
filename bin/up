#!/usr/bin/env bash

# "To provide additional docker-compose args, set the COMPOSE var. Ex:
# COMPOSE="-f FILE_PATH_HERE"

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

ERROR() {
    printf "\e[101m\e[97m[ERROR]\e[49m\e[39m %s\n" "$@"
}

WARNING() {
    printf "\e[101m\e[97m[WARNING]\e[49m\e[39m %s\n" "$@"
}

INFO() {
    printf "\e[104m\e[97m[INFO]\e[49m\e[39m %s\n" "$@"
}

exists() {
    type "$1" > /dev/null 2>&1
}

JEPSEN_ROOT=${JEPSEN_ROOT:-""}

# Change directory to the parent directory of this script. Taken from:
# https://stackoverflow.com/a/246128/3858681
pushd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/.."

HELP=0
INIT_ONLY=0
NODE_COUNT=5
DEV=""
COMPOSE=${COMPOSE:-""}
RUN_AS_DAEMON=0
POSITIONAL=()

while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --help)
            HELP=1
            shift # past argument
            ;;
        --init-only)
            INIT_ONLY=1
            shift # past argument
            ;;
        --dev)
            if [ ! "$JEPSEN_ROOT" ]; then
                JEPSEN_ROOT="$(cd ../ && pwd)"
                export JEPSEN_ROOT
                INFO "JEPSEN_ROOT is not set, defaulting to: $JEPSEN_ROOT"
            fi
            INFO "Running docker-compose with dev config"
            DEV="-f docker-compose.dev.yml"
            shift # past argument
            ;;
        --compose)
            COMPOSE="-f $2"
            shift # past argument
            shift # past value
            ;;
        -d|--daemon)
            INFO "Running docker-compose as daemon"
            RUN_AS_DAEMON=1
            shift # past argument
            ;;
        -n|--node-count)
            NODE_COUNT=$2
            shift
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            ERROR "unknown option $1"
            shift # past argument
            ;;
    esac
done
if [ "${#POSITIONAL[@]}" -gt 0 ]; then
  set -- "${POSITIONAL[@]}" # restore positional parameters
fi

if [ "${HELP}" -eq 1 ]; then
    echo "Usage: $0 [OPTION]"
    echo "  --help                                                Display this message"
    echo "  --init-only                                           Initializes ssh-keys, but does not call docker-compose"
    echo "  --daemon                                              Runs docker-compose in the background"
    echo "  --dev                                                 Mounts dir at host's JEPSEN_ROOT to /jepsen on jepsen-control container, syncing files for development"
    echo "  --compose PATH                                        Path to an additional docker-compose yml config."
    echo "To provide multiple additional docker-compose args, set the COMPOSE var directly, with the -f flag. Ex: COMPOSE=\"-f FILE_PATH_HERE -f ANOTHER_PATH\" ./up.sh --dev"
    exit 0
fi

exists ssh-keygen || { ERROR "Please install ssh-keygen (apt-get install openssh-client)"; exit 1; }
exists perl || { ERROR "Please install perl (apt-get install perl)"; exit 1; }

# always set JEPSEN_ROOT
if [ ! "$JEPSEN_ROOT" ]; then
    JEPSEN_ROOT="$(pwd)"
    export JEPSEN_ROOT
    INFO "JEPSEN_ROOT is not set, defaulting to: $JEPSEN_ROOT"
fi

# unwinding to individual docker commands

exists docker ||
    { ERROR "Please install docker (https://docs.docker.com/engine/install/)";
      exit 1; }

# stop containers
INFO "stop containers"
docker stop jepsen_control || INFO "jepsen_control container not running" 
for ((n=1;n<=NODE_COUNT;n++)); do
    docker stop jepsen_n${n} || INFO "jepsen_n${n} container not running"
done

# rm containers
INFO "rm containers"
docker rm --force --volumes jepsen_control || INFO "jepsen_control container doesn't exist"
for ((n=1;n<=NODE_COUNT;n++)); do
    docker rm --force --volumes jepsen_n${n} || INFO "jepsen_n${n} container doesn't exist"
done

# rm network
INFO "rm network"
docker network rm jepsen_network || INFO "jepsen_network network doesn't exist"

# rm volumes
INFO "rm volume"
docker volume rm jepsen_shared || INFO "jepsen_shared volume doesn't exist"

# build control image
INFO "building control image"
pushd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/../control"
docker build --tag jepsen_control .
popd

# build node image
INFO "building node image"
pushd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/../node"
docker build --tag jepsen_node .
popd

# create volume
INFO "creating volume"
docker volume create jepsen_shared || { ERROR "failed to create jepsen_shared volume";
                                        exit 1; }

# create network
INFO "creating network"
docker network create jepsen_network || { ERROR "failed to create jepsen_network network";
                                          exit 1; }

# run images in containers

INFO "Starting control..."
docker run \
    --detach \
    --expose 22 \
    --expose 8080 \
    --hostname control \
    --name jepsen_control \
    --network jepsen_network \
    -p 127.0.0.1::8080 \
    --stop-signal SIGRTMIN+3 \
    --tmpfs /run:size=100M \
    --tmpfs /run/lock:size=100M \
    --tty \
    --volume jepsen_shared:/var/jepsen/shared \
    --volume ${JEPSEN_ROOT}:/jepsen:rw \
    jepsen_control

# TODO?
#   --cap-add ALL # needed for Jepsen nemesis, but causes mount priviledge errors in boot log
#   --privileged  # crashes host, needs power cycle
INFO "Starting nodes..."
for ((n=1;n<=NODE_COUNT;n++)); do
    docker run \
        --cap-add ALL \
        --cgroupns host \
        --detach \
        --env ROOT_PASS=root \
        --expose 22 \
        --expose 3001 \
        --expose 8087 \
        --hostname n${n} \
        --name jepsen_n${n} \
        --network jepsen_network \
        --stop-signal SIGRTMIN+3 \
        --tmpfs /run:size=100M \
        --tmpfs /run/lock:size=100M \
        --tty \
        --volume /sys/fs/cgroup:/sys/fs/cgroup:rw \
        --volume jepsen_shared:/var/jepsen/shared \
        jepsen_node
done

INFO "sleeping to let docker run --detach bring up all containers"
sleep 5 

# create ssh keys
INFO "creating ssh keys in containers"
docker exec \
    --tty \
    jepsen_control \
    ssh-keygen \
        -b 4096 \
        -f /root/.ssh/id_rsa \
        -t rsa \
        -N ""
for ((n=1;n<=NODE_COUNT;n++)); do
    docker exec \
        --tty \
        jepsen_n${n} \
        ssh-keygen \
            -b 4096 \
            -f /root/.ssh/id_rsa \
            -t rsa \
            -N ""
done

# cp control's key to shared location,
# have all nodes trust it
INFO "ssh key dance"
docker exec \
    --tty \
    jepsen_control \
    cp \
        /root/.ssh/id_rsa.pub \
        /var/jepsen/shared/control_ssh_id_rsa_pub
for ((n=1;n<=NODE_COUNT;n++)); do
docker exec \
    --tty \
    jepsen_n${n} \
    /root/ssh-dance.sh
done

# make all nodes known_hosts to the control node
docker exec \
    --tty \
    jepsen_control \
    sh -c "echo > /root/.ssh/known_hosts"
for ((n=1;n<=NODE_COUNT;n++)); do
    docker exec \
        --tty \
        jepsen_control \
        sh -c "ssh-keyscan -t rsa n${n} >> /root/.ssh/known_hosts && ssh-keyscan -t ed25519 n${n} >> /root/.ssh/known_hosts"
done

# root/root on nodes
INFO "setting root password to root on nodes"
for ((n=1;n<=NODE_COUNT;n++)); do
    docker exec \
        --tty \
        jepsen_n${n} \
        bash -c 'echo -e "root\nroot\n" | passwd root'
done

# each node added itself to shared file on boot
INFO "creating control:/root/nodes"
docker exec \
    --tty \
    jepsen_control \
    bash -c "sort -V /var/jepsen/shared/nodes > /root/nodes"

popd
